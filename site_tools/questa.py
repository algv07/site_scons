#-------------------------------------------------------------------------------
#
#    QuestaSim Configuration Tool
#
#    Author: Harry E. Zhurov
#
#-------------------------------------------------------------------------------

import os

import SCons.Builder
import SCons.Scanner

from utils import *

#-------------------------------------------------------------------------------
#
#    External Environment
#
MENTOR  = os.environ['MENTOR']
QUESTA  = os.path.join(MENTOR, 'questa', 'questasim', 'bin')

#-------------------------------------------------------------------------------
#
#    Action functions
#
def ip_simlib_script(target, source, env):

    src = source[0]
    trg = target[0]

    src_path = str(src)
    trg_path = str(trg)
    
    ip_name = drop_suffix(src.name)
    
    print('generate script:   \'' + trg.name + '\'')

    param_sect = 'config'
    ip_path    = os.path.join(env['CFG_IP_PATH'], ip_name) + '.' + env['IP_CONFIG_SUFFIX']
    ip_cfg     = read_ip_config(ip_path, param_sect, env['CFG_PATH'])
    
    param_sect  = 'sources'
    search_root = env['IPSIM_CONFIG_PATH']
    src_sim     =  read_ipsim_config(ip_cfg['type'] + '.' + env['CONFIG_SUFFIX'], search_root)
    
    src_str = ' '.join(src_sim).replace('${ip_name}', ip_name)
    
    title_text =\
    'IP core "' + ip_name + '" simulation library compile script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually.'
    
    text  = 'onerror {quit -f -code 255}' + os.linesep*2
    text += 'vlog -work ipsimlib' + env['VLOG_FLAGS'] + env['VLOG_OPTIMIZATION'] + ' \\' + os.linesep
    for i in src_sim:
        text += ' '*4 + i.replace('${ip_name}', ip_name) + ' \\' + os.linesep
    
    text += os.linesep + 'exit' + os.linesep
        
    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')
        
    with open(trg_path, 'w') as ofile:
        ofile.write(out)
               
    return None

#-------------------------------------------------------------------------------
def ip_simlib(target, source, env):

    trg = target[0]

    trg_path = str(trg)
    trg_dir  = str(trg.dir)

    print('compile lib  \'' + trg.name + '\'')
    
    if not os.path.exists(trg_path):
        #print('create lib  \'' + trg.name + '\'')
        rcode = pexec(env['VLIBCOM'] + ' ' + trg.name, trg_dir)
        if rcode: return rcode
        
        rcode = pexec(env['VMAPCOM'] + ' -c', trg_dir)
        if rcode: return rcode

        cmd = []
        cmd.append(env['VMAPCOM'])
        cmd.append(trg.name)
        cmd.append(os.path.abspath(trg_path))
        cmd = ' '.join(cmd)

        if env['VERBOSE']:
          print(cmd)
        
        rcode = pexec(cmd, trg_dir)
        if rcode: return rcode
                            
    for src in source:
        cmd = []
        cmd.append(env['VSIMCOM'])
        cmd.append(' -batch')
        cmd.append(' -do ' + os.path.abspath(str(src)))
        cmd = ' '.join(cmd)
        
        ip_name = src.name.replace('-ipsim.'+env['SIM_SCRIPT_SUFFIX'], '')
        print('-'*80)
        print(' '*8, 'Compile', '\'' + ip_name + '\'', 'modules for simlib')
        rcode = pexec(cmd, env['IP_OOC_PATH'])
        print('-'*80)
        if rcode: 
            Execute( Delete(src) )        
            return rcode
        
    return None
#-------------------------------------------------------------------------------
#
#    Helper functions
#
def compile_simlib_emmitter(target, source, env):
    pass
    

#-------------------------------------------------------------------------------
#
#    Scanners
#
#---------------------------------------------------------------------
#
#    Scanner functions
#

#-------------------------------------------------------------------------------
#
#    Targets
#
def make_trg_nodes(src, src_suffix, trg_suffix, trg_dir, builder):

    s0 = src
    if(type(s0)) != str:
        s0 = str(s0[0])

    src_name = os.path.split(s0)[1]
    trg_name = src_name.replace(src_suffix, trg_suffix)
    trg      = os.path.join(trg_dir, trg_name)
    trg_list = builder(trg, src)

    #Depends(trg_list, 'top.scons')
    return trg_list

#---------------------------------------------------------------------
#
#    Pseudo-builders: IP simulation library stuff
#
def ip_simlib_scripts(env, src):
    res     = []
    src_sfx = '.'+env['IP_CORE_SUFFIX']
    trg_sfx = '-ipsim.'+env['SIM_SCRIPT_SUFFIX']
    trg_dir = os.path.join(env['IP_OOC_PATH'], env['IP_SCRIPT_DIRNAME'])
    builder = env.IpSimLibScript
    for i in src:
        #ip_src = os.path.join(env['CFG_IP_PATH'], i + src_sfx) # '.' + env['IP_CONFIG_SUFFIX'])
        #res.append(make_trg_nodes(ip_src, src_sfx, trg_sfx, trg_dir, builder))    
        res.append(make_trg_nodes(i, src_sfx, trg_sfx, trg_dir, builder))    

    return res

#-------------------------------------------------------------------------------
def compile_simlib(env, src):
    trg = os.path.join(env['IP_OOC_PATH'], env['IP_SIMLIB_NAME'])
    return env.IpSimlib(trg, src)

#-------------------------------------------------------------------------------

    
    
#-------------------------------------------------------------------------------
#
#    Set up tool construction environment
#
def generate(env):
    
    Scanner = SCons.Scanner.Scanner
    Builder = SCons.Builder.Builder
    
    env['VLOGCOM'] = os.path.join(QUESTA, 'vlog')
    env['VLIBCOM'] = os.path.join(QUESTA, 'vlib')
    env['VMAPCOM'] = os.path.join(QUESTA, 'vmap')
    env['VSIMCOM'] = os.path.join(QUESTA, 'vsim')
    env['VSIMGUI'] = os.path.join(MENTOR, 'questa', 'questa.sh') + ' -gui'
    
    env['VLOG_FLAGS']        = ' -incr -sv -mfcu'
    env['VLOG_OPTIMIZATION'] = ' -O5'
    if 'vivado' in env['TOOLS']:
        env['VOPT_FLAGS']        = ' glbl'
    

    env['IP_SIMLIB_NAME']    = 'ipsimlib'
    env['SIM_SCRIPT_SUFFIX'] = 'do'
        
        
    env['VERBOSE'] = True
    
    env['IPSIM_CONFIG_PATH'] = os.path.join(str(env.Dir('#')), 'lib', 'ipsim')
    
    #-----------------------------------------------------------------
    #
    #   Scanners
    #
#   CfgImportScanner = Scanner(name          = 'CfgImportScanner',
#                      function      = scan_cfg_files,
#                      skeys         = ['.' + env['IP_CONFIG_SUFFIX']],
#                      recursive     = True,
#                      path_function = SCons.Scanner.FindPathDirs('SETTINGS_SEARCH_PATH')
#                     )

    #-----------------------------------------------------------------
    #
    #   Builders
    #
    IpSimLibScript = Builder(action = ip_simlib_script)
    
    IpSimLib       = Builder(action = ip_simlib, target_factory = env.fs.Dir)
        
    
    Builders = {
        'IpSimLibScript'     : IpSimLibScript,
        'IpSimlib'      : IpSimLib
    }
    
    
    env.Append(BUILDERS = Builders)

    #-----------------------------------------------------------------
    #
    #   IP core processing pseudo-builders
    #
    env.AddMethod(ip_simlib_scripts, 'IpSimLibScripts')
    env.AddMethod(compile_simlib, 'CompileSimlib')
        
#-------------------------------------------------------------------------------
def exists(env):
    print('questa tool: exists')
#-------------------------------------------------------------------------------
    
